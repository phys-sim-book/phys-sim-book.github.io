#include "distance.h"
template <typename T>
__device__ __host__ void PointLineDistanceVal(T &val, const Eigen::Vector<T, 2> &p, const Eigen::Vector<T, 2> &e0, const Eigen::Vector<T, 2> &e1)
{
    /*****************************************************************************************************************************
    Function generated by SymEigen.py
    Author: MuGdxy
    GitHub: https://github.com/MuGdxy/SymEigen
    E-Mail: lxy819469559@gmail.com
    ******************************************************************************************************************************
    Symbol Name Mapping:
    p:
        -> {}
        -> Matrix([[p(0)], [p(1)]])
    e0:
        -> {}
        -> Matrix([[e0(0)], [e0(1)]])
    e1:
        -> {}
        -> Matrix([[e1(0)], [e1(1)]])
    *****************************************************************************************************************************/
    /* Sub Exprs */
    auto x0 = -e0(0) + e1(0);
    auto x1 = -e0(1) + e1(1);
    /* Simplified Expr */
    val = (-e0(0) * e1(1) + e0(1) * e1(0) + p(0) * x1 - p(1) * x0) * (-e0(0) * e1(1) + e0(1) * e1(0) + p(0) * x1 - p(1) * x0) / ((x0) * (x0) + (x1) * (x1));
}

template <typename T>
__device__ __host__ void PointLineDistanceGrad(Eigen::Vector<T, 6> &grad, const Eigen::Vector<T, 2> &p, const Eigen::Vector<T, 2> &e0, const Eigen::Vector<T, 2> &e1)
{
    T t13 = -e1(0) + e0(0);
    T t14 = -e1(1) + e0(1);
    T t23 = 1.0 / (t13 * t13 + t14 * t14);
    T t25 = ((e0(0) * e1(1) + -(e0(1) * e1(0))) + t14 * p(0)) + -(t13 * p(1));
    T t24 = t23 * t23;
    T t26 = t25 * t25;
    T t27 = (e0(0) * 2.0 + -(e1(0) * 2.0)) * t24 * t26;
    t26 *= (e0(1) * 2.0 + -(e1(1) * 2.0)) * t24;
    grad(0) = t14 * t23 * t25 * 2.0;
    grad(1) = t13 * t23 * t25 * -2.0;
    t24 = t23 * t25;
    grad(2) = -t27 - t24 * (-e1(1) + p(1)) * 2.0;
    grad(3) = -t26 + t24 * (-e1(0) + p(0)) * 2.0;
    grad(4) = t27 + t24 * (p(1) - e0(1)) * 2.0;
    grad(5) = t26 - t24 * (p(0) - e0(0)) * 2.0;
}

template <typename T>
__device__ __host__ void PointLineDistanceHess(Eigen::Matrix<T, 6, 6> &hess, const Eigen::Vector<T, 2> &p, const Eigen::Vector<T, 2> &e0, const Eigen::Vector<T, 2> &e1)
{
    T t15 = -e0(0) + p(0);
    T t16 = -e0(1) + p(1);
    T t17 = -e1(0) + p(0);
    T t18 = -e1(1) + p(1);
    T t19 = -e1(0) + e0(0);
    T t20 = -e1(1) + e0(1);
    T t21 = e0(0) * 2.0 + -(e1(0) * 2.0);
    T t22 = e0(1) * 2.0 + -(e1(1) * 2.0);
    T t23 = t19 * t19;
    T t24 = t20 * t20;
    T t31 = 1.0 / (t23 + t24);
    T t34 = ((e0(0) * e1(1) + -(e0(1) * e1(0))) + t20 * p(0)) + -(t19 * p(1));
    T t32 = t31 * t31;
    T t33 = t32 * t31;
    T t35 = t34 * t34;
    T t60 = t31 * t34 * 2.0;
    T t59 = -(t19 * t20 * t31 * 2.0);
    T t62 = t32 * t35 * 2.0;
    T t64 = t21 * t21 * t33 * t35 * 2.0;
    T t65 = t22 * t22 * t33 * t35 * 2.0;
    T t68 = t15 * t21 * t32 * t34 * 2.0;
    T t71 = t16 * t22 * t32 * t34 * 2.0;
    T t72 = t17 * t21 * t32 * t34 * 2.0;
    T t75 = t18 * t22 * t32 * t34 * 2.0;
    T t76 = t19 * t21 * t32 * t34 * 2.0;
    T t77 = t20 * t21 * t32 * t34 * 2.0;
    T t78 = t19 * t22 * t32 * t34 * 2.0;
    T t79 = t20 * t22 * t32 * t34 * 2.0;
    T t90 = t21 * t22 * t33 * t35 * 2.0;
    T t92 = t16 * t20 * t31 * 2.0 + t77;
    T t94 = -(t17 * t19 * t31 * 2.0) + t78;
    T t96 = (t18 * t19 * t31 * 2.0 + -t60) + t76;
    T t99 = (-(t15 * t20 * t31 * 2.0) + -t60) + t79;
    T t93 = t15 * t19 * t31 * 2.0 + -t78;
    t35 = -(t18 * t20 * t31 * 2.0) + -t77;
    T t97 = (t17 * t20 * t31 * 2.0 + t60) + -t79;
    T t98 = (-(t16 * t19 * t31 * 2.0) + t60) + -t76;
    T t100 = ((-(t15 * t16 * t31 * 2.0) + t71) + -t68) + t90;
    t19 = ((-(t17 * t18 * t31 * 2.0) + t75) + -t72) + t90;
    T t102_tmp = t17 * t22 * t32 * t34;
    t76 = t15 * t22 * t32 * t34;
    t22 = (((-(t15 * t17 * t31 * 2.0) + t62) + -t65) + t76 * 2.0) + t102_tmp * 2.0;
    t33 = t18 * t21 * t32 * t34;
    t20 = t16 * t21 * t32 * t34;
    t79 = (((-(t16 * t18 * t31 * 2.0) + t62) + -t64) + -(t20 * 2.0)) + -(t33 * 2.0);
    t77 = (((t15 * t18 * t31 * 2.0 + t60) + t68) + -t75) + -t90;
    t78 = (((t16 * t17 * t31 * 2.0 + -t60) + t72) + -t71) + -t90;
    hess(0, 0) = t24 * t31 * 2.0;
    hess(0, 1) = t59;
    hess(0, 2) = t35;
    hess(0, 3) = t97;
    hess(0, 4) = t92;
    hess(0, 5) = t99;
    hess(1, 0) = t59;
    hess(1, 1) = t23 * t31 * 2.0;
    hess(1, 2) = t96;
    hess(1, 3) = t94;
    hess(1, 4) = t98;
    hess(1, 5) = t93;
    hess(2, 0) = t35;
    hess(2, 1) = t96;
    T t35_new = -t62 + t64;
    hess(2, 2) = (t35_new + t18 * t18 * t31 * 2.0) + t33 * 4.0;
    hess(2, 3) = t19;
    hess(2, 4) = t79;
    hess(2, 5) = t77;
    hess(3, 0) = t97;
    hess(3, 1) = t94;
    hess(3, 2) = t19;
    T t33_new = -t62 + t65;
    hess(3, 3) = (t33_new + t17 * t17 * t31 * 2.0) - t102_tmp * 4.0;
    hess(3, 4) = t78;
    hess(3, 5) = t22;
    hess(4, 0) = t92;
    hess(4, 1) = t98;
    hess(4, 2) = t79;
    hess(4, 3) = t78;
    hess(4, 4) = (t35_new + t16 * t16 * t31 * 2.0) + t20 * 4.0;
    hess(4, 5) = t100;
    hess(5, 0) = t99;
    hess(5, 1) = t93;
    hess(5, 2) = t77;
    hess(5, 3) = t22;
    hess(5, 4) = t100;
    hess(5, 5) = (t33_new + t15 * t15 * t31 * 2.0) - t76 * 4.0;
}

template __device__ __host__ void PointLineDistanceVal(float &val, const Eigen::Vector<float, 2> &p, const Eigen::Vector<float, 2> &e0, const Eigen::Vector<float, 2> &e1);
template __device__ __host__ void PointLineDistanceGrad(Eigen::Vector<float, 6> &grad, const Eigen::Vector<float, 2> &p, const Eigen::Vector<float, 2> &e0, const Eigen::Vector<float, 2> &e1);
template __device__ __host__ void PointLineDistanceHess(Eigen::Matrix<float, 6, 6> &hess, const Eigen::Vector<float, 2> &p, const Eigen::Vector<float, 2> &e0, const Eigen::Vector<float, 2> &e1);

template __device__ __host__ void PointLineDistanceVal(double &val, const Eigen::Vector<double, 2> &p, const Eigen::Vector<double, 2> &e0, const Eigen::Vector<double, 2> &e1);
template __device__ __host__ void PointLineDistanceGrad(Eigen::Vector<double, 6> &grad, const Eigen::Vector<double, 2> &p, const Eigen::Vector<double, 2> &e0, const Eigen::Vector<double, 2> &e1);
template __device__ __host__ void PointLineDistanceHess(Eigen::Matrix<double, 6, 6> &hess, const Eigen::Vector<double, 2> &p, const Eigen::Vector<double, 2> &e0, const Eigen::Vector<double, 2> &e1);